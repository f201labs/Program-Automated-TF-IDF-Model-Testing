/*
   Copyright © 2006-10, Jody Larsen.  jody.larsen@uky.edu, jody.larsen@gmail.com, jody@dreamfrog.com
   All rights reserved.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published
   by the Free Software Foundation; either version 2.1 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.
   See the GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this library; if not, write to the
   Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor Boston, MA  02110-1301 USA
*/

using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.VocabularyFilters
{
    public class VocabularyFilterStatisticalStopword : IVocabularyFilter
    {
        #region IVocabularyFilter Members

        public VocabularyFilterStatisticalStopword() { }
        public VocabularyFilterStatisticalStopword(double cutoff)
        {
            _cutoff = cutoff;
        }

        private double _cutoff = 0.60;
        public double Cutoff
        {
            get { return _cutoff; }
            set { _cutoff = value; }
        }

        public void applyVocabularyFilter(RetroDocument doc)
        {
            Term[] terms = new Term[doc.Vocabulary.Values.Count];
            doc.Vocabulary.Values.CopyTo(terms, 0);

            DocumentCollection docs = new DocumentCollection(doc.HighLevelRequirements);
            docs.AddRange(doc.LowLevelRequirements);

            for (int i = 0; i < terms.Length; i++)
            {
                Term term = terms[i];

                List<double> freqs = new List<double>();

                double frequency = 0.0, variance = 0.0;
                foreach (Document highReq in docs)
                {
                    int totalTermFreq = 0;
                    DocumentTerm termInstance = null;
                    foreach (DocumentTerm dt in highReq.Keywords)
                    {
                        totalTermFreq += dt.Frequency;
                        if (dt.Term == term) termInstance = dt;
                    }
                    if (termInstance == null) continue;
                    double freq = (double)termInstance.Frequency / (double)totalTermFreq;
                    frequency += freq;
                    freqs.Add(freq);
                }
                double meanFrequency = frequency / (double)docs.Count;

                foreach (Double d in freqs)
                {
                    variance += (d - frequency / (double)freqs.Count) * (d - frequency / (double)freqs.Count);
                }

                double freq2 = ((double)term.DocNumber / (double)doc.LowLevelRequirements.Count);

                if (meanFrequency > _cutoff || freq2 > 0.50)
                {
                    foreach (Document highReq in doc.HighLevelRequirements)
                    {
                        highReq.Keywords.RemoveTerm(term);
                    }
                    foreach (Document lowReq in doc.LowLevelRequirements)
                    {
                        lowReq.Keywords.RemoveTerm(term);
                    }
                    doc.Vocabulary.Remove(term.Text);
                    terms[i] = null;
                    System.Diagnostics.Trace.WriteLine(term.Text + ", " + meanFrequency / variance+",   "+meanFrequency + ",  " + variance + ",   " + freq2);
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return "Remove Common Vocabulary Terms (cutoff = "+Cutoff+")";
        }

        #endregion
    }
}
