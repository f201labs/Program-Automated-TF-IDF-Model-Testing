/*
   Copyright © 2006-10, Jody Larsen.  jody.larsen@uky.edu, jody.larsen@gmail.com, jody@dreamfrog.com
   All rights reserved.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published
   by the Free Software Foundation; either version 2.1 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.
   See the GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this library; if not, write to the
   Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor Boston, MA  02110-1301 USA
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterTopNRankBoth : IResultFilter
    {
        #region IResultFilter Members

        public int TopN = int.MaxValue;

        public ResultFilterTopNRankBoth() { }
        public ResultFilterTopNRankBoth(int topN) { TopN = topN; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            foreach (Document highReq in highDocs)
            {
                if (highReq.CandidateLinks.Count <= 0) continue;

                highReq.CandidateLinks.SortByWeight(true);
                for (int i = 0; i < highReq.CandidateLinks.Count; i++)
                {
                    highReq.CandidateLinks[i].Rank = i;
                }
            }

            foreach (Document lowReq in lowDocs)
            {
                if (lowReq.CandidateLinks.Count <= 0) continue;

                lowReq.CandidateLinks.SortByWeight(true);
                for (int i = 0; i < lowReq.CandidateLinks.Count; i++)
                {
                    lowReq.CandidateLinks[i].Rank = Math.Min(lowReq.CandidateLinks[i].Rank, i);
                }
            }

            foreach (Document highReq in highDocs)
            {
                if (highReq.CandidateLinks.Count <= 0) continue;

                highReq.CandidateLinks.SortByWeight(false);

                int defaultLinkCount = 0;
                int cutoffIndex = highReq.CandidateLinks.Count;
                for (int i = 0; i < highReq.CandidateLinks.Count; i++)
                {
                    if (highReq.CandidateLinks[i].LinkStatus != "Default") continue;

                    if (defaultLinkCount++ >= TopN)
                    {
                        cutoffIndex = i;
                        break;
                    }
                }

                for (int j = highReq.CandidateLinks.Count - 1; j >= cutoffIndex; j--)
                {
                    if (highReq.CandidateLinks[j].LinkStatus == "Default")
                    {
                        highReq.CandidateLinks[j].Remove();
                    }
                }
            }

        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 5;
        }

        public string getPluginName()
        {
            return "Top N Local (Both) Filter (N = " + TopN + ")";
        }

        #endregion
    }
}
