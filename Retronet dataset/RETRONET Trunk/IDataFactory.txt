/*
   Copyright © 2006-10, Jody Larsen.  jody.larsen@uky.edu, jody.larsen@gmail.com, jody@dreamfrog.com
   All rights reserved.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published
   by the Free Software Foundation; either version 2.1 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.
   See the GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this library; if not, write to the
   Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor Boston, MA  02110-1301 USA
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDataFactory
    {
        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection();

        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <param name="col">The col.</param>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col);

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection();

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <param name="col">The col.</param>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection(IDocumentCollection col);

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <returns></returns>
        ITermCollection CreateTermCollection();

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <param name="col">The col.</param>
        /// <returns></returns>
        ITermCollection CreateTermCollection(ITermCollection col);

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink();

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <param name="link">The link.</param>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink(ICandidateLink link);

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <returns></returns>
        IDocument CreateDocument();

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <param name="doc">The doc.</param>
        /// <returns></returns>
        IDocument CreateDocument(IDocument doc);

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm();

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <param name="docTerm">The doc term.</param>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm);

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <returns></returns>
        ITerm CreateTerm();

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <param name="term">The term.</param>
        /// <returns></returns>
        ITerm CreateTerm(ITerm term);

        /// <summary>
        /// Gets the link status list.
        /// </summary>
        /// <returns></returns>
        object[] GetLinkStatusList();
    }
}
