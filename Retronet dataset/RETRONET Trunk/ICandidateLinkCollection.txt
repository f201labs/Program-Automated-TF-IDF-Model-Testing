/*
   Copyright © 2006-10, Jody Larsen.  jody.larsen@uky.edu, jody.larsen@gmail.com, jody@dreamfrog.com
   All rights reserved.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published
   by the Free Software Foundation; either version 2.1 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.
   See the GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this library; if not, write to the
   Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor Boston, MA  02110-1301 USA
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Stores a set of candidate links
    /// </summary>
    public interface ICandidateLinkCollection : IList<ICandidateLink>
    {
        /// <summary>
        /// Searches the collection for all candidate links with the given status
        /// </summary>
        /// <param name="LinkStatus"></param>
        /// <param name="SortByWeightDesc"></param>
        /// <returns></returns>
        ICandidateLinkCollection FindByStatus(String LinkStatus, bool SortByWeightDesc);

        /// <summary>
        /// Searches the collection for candidate links with the given low level id
        /// </summary>
        /// <param name="lowLevelID"></param>
        /// <returns></returns>
        ICandidateLink FindByLowLevelID(String lowLevelID);

        /// <summary>
        /// Searches the collection for candidate links with the given high and low level ids
        /// </summary>
        /// <param name="highDoc"></param>
        /// <param name="lowDoc"></param>
        /// <returns></returns>
        ICandidateLink FindByHighLevelDocLowLevelDoc(IDocument highDoc, IDocument lowDoc);

        /// <summary>
        /// Sorts the collection by weight values.
        /// If decendingOrder = true, the collection is sorted by descending value,
        /// otherwise by ascending value.
        /// </summary>
        void SortByWeight(bool decendingOrder);
    }
}
