/*
   Copyright © 2006-10, Jody Larsen.  jody.larsen@uky.edu, jody.larsen@gmail.com, jody@dreamfrog.com
   All rights reserved.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published
   by the Free Software Foundation; either version 2.1 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.
   See the GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this library; if not, write to the
   Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor Boston, MA  02110-1301 USA
*/

using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.VocabularyFilters
{
    public class VocabularyFilterRemoveUltraRareTermsFreq2 : IVocabularyFilter
    {
        #region IVocabularyFilter Members

        public VocabularyFilterRemoveUltraRareTermsFreq2() { }
        public VocabularyFilterRemoveUltraRareTermsFreq2(int cutoff)
        {
            _cutoff = cutoff;
        }

        public VocabularyFilterRemoveUltraRareTermsFreq2(int cutoff, bool trimLowLevelOnly)
            : this(cutoff)
        {
            _trimLowLevelOnly = trimLowLevelOnly;
        }
        private int _cutoff = 1;
        public int Cutoff
        {
            get { return _cutoff; }
            set { _cutoff = value; }
        }

        bool _trimLowLevelOnly = false;

        public void applyVocabularyFilter(RetroDocument doc)
        {
            List<ITerm> terms = new List<ITerm>(doc.Vocabulary.Values);
            foreach (Term t in terms)
            {
                //if (t.Text == "task" || t.Text == "function" || t.Text == "via") { }
                //else
                if (t.Frequency > Cutoff) continue;
                //if (t.Frequency > Cutoff  && t.DocNumber > 2) continue;
                //if (t.DocNumber > 1 && (t.Frequency > Cutoff || (t.Frequency != t.DocNumber && _trimLowLevelOnly && t.FileBase == DocFileBase.Both_Documents))) continue;
                //if (t.Frequency > Cutoff || (t.Frequency == t.DocNumber && _trimLowLevelOnly && t.FileBase == DocFileBase.Both_Documents)) continue;

                foreach (Document highReq in doc.HighLevelRequirements)
                {
                    highReq.Keywords.RemoveTerm(t);
                }

                foreach (Document lowReq in doc.LowLevelRequirements)
                {
                    lowReq.Keywords.RemoveTerm(t);
                }

                doc.Vocabulary.Remove(t.Text);
            }
            terms.Clear();
        }

        private int compareTerms(Term a, Term b)
        {
            return a.Frequency.CompareTo(b.Frequency);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return "Remove Rare Terms (cutoff = "+Cutoff+")";
        }

        #endregion
    }
}
