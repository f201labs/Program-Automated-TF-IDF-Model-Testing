/*
   Copyright © 2006-10, Jody Larsen.  jody.larsen@uky.edu, jody.larsen@gmail.com, jody@dreamfrog.com
   All rights reserved.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published
   by the Free Software Foundation; either version 2.1 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.
   See the GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this library; if not, write to the
   Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor Boston, MA  02110-1301 USA
*/

using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class WeightCalculator_Okapi : ITermWeightCalculator
    {
        public override string ToString()
        {
            return getPluginName();
        }

        #region ITermWeightCalculator Members

        public void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs)
        {
            int totalNumberOfDocuments = docs.Count;
            double avg_doc_length = 0.0;

            foreach (Document doc in docs)
            {
                avg_doc_length += doc.Keywords.Count;
            }
            avg_doc_length = avg_doc_length / totalNumberOfDocuments;

            foreach (Document doc in docs)
            {
                foreach (DocumentTerm dterm in doc.Keywords)
                {
                    dterm.Weight = (
                        (double)dterm.Frequency * Math.Log((totalNumberOfDocuments - dterm.Term.DocNumber + 0.5) /
                        ( dterm.Term.DocNumber + 0.5)) / ( 0.5+1.5 * (((double)vocabulary.Count) / avg_doc_length) + dterm.Frequency)
                    );
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 2;
        }

        public string getPluginName()
        {
            return "Okapi";
        }

        #endregion
    }
}
